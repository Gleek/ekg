#+TITLE: ekg

* Quick intro
:PROPERTIES:
:ORG-IMAGE-ACTUAL-WIDTH: 300
:END:
The ekg module is a simple but opinionated note taking application, for emacs.
It is a substitute for such other emacs applications such as org-roam or denote.
ekg stands for /emacs knowledge graph/.

Data is completely stored in a sqlite database. Notes are organized around tags,
and you can view many notes by looking at one or more tags.

#+CAPTION: An example of viewing a tag in ekg
[[./screenshots/ekg-tag-view.jpg]]

Editing a note from one of these buffers, or capturing a new note, lets you edit
both the note's data and the text of the note itself in a buffer.

#+CAPTION: An eample of editing a note
[[./screenshots/ekg-tag-view.jpg]]

Additionally, [[https://youtu.be/qxa2VrseFUA][a video demonstration and explanation of ekg]] is on YouTube.

* Design of ekg
There are a few core ideas driving the design of ekg. The first is that a title
and a tag are the same thing. This isn't unique to ekg, other tools such as
Logseq also consider tags to be equivalent to pages of the same name, although
this functionality is limited since tags can only be just one word. In org-roam,
a tag is just a tag, so you can have a note called "emacs" and a tag called
"emacs", but these are not related. ekg takes the idea a step further: there are
(mostly) no titles, only tags. So, instead of writing text in a note called
"emacs", just write a note and tag it with "emacs". There is no "title", only
tags. If you write another note about emacs, also tag it "emacs", and maybe
something else too. Or tag it something more involved, like an idea: "emacs's
power derives from putting all data in buffers, and making all commands deal
with buffers." That's a perfectly fine tag, and if you notice a connecting idea,
you can tag it with this as well.

The advantage of this method is that it solves something that has bothered me
for a while about the recent suite of tools like org-roam: backlinks are
non-symmetrical. If you enter a note in your org-roam daily about emacs, and
link it to the emacs note, then when you go to the emacs note, you have to
explicitly enable the backlinks buffer to see the daily entry where you first
entered it. Systems such as Logseq and the original Roam have backlinks
alongside normal content, but this doesn't seem possible in emacs, where a
buffer of a file is expected show the file, and tricks with overlays can't solve
the issue. Even if it could, I want a system in which it doesn't matter where
you enter the data, it shows up in the original place the same as everywhere
else it is linked to, not as a backlink, but just as part of the content. Having
notes with no title, only tags, makes this possible, because there is no longer
a difference between linking and writing in the context in, both are denoted by
tags.

As a consequence of this design, notes can be small, because to add another note
to a subject, you don't need to append to an existing note, you can create
another note.

Additionally, ekg has another key difference: it uses =sqlite= instead of the
filesystem. When notes are small and do not have titles, files don't make a lot
of sense anymore. Additionally, the filesystem is limited. Even in org-roam,
which uses it, it needs to be augmented with sqlite anyway to enable fast
querying of tags and other operations. The sqlite-only approach also means it is
much easier to make certain kinds of changes, since they only involve changing
the database and not the text as well. In general, text and data are separated
as much as possible here, so there's no need or desire for the text to have to
store data as well, we leave that completely to the database.
* Prefixed tags
Another concept, loosely applied in ekg is that of tags with standard prefixes.
By default, date tags are prefixed with "date/". This is a way to distinguish
date tags from other kinds of tags. Most tags shouldn't need it, but it often is
useful to have prefixes to group tags in some way. For instance, perhaps all
idea tags should be prefixed with "idea/". In my ekg repository I use in my
company, I have "person/" as a tag prefix for my coworker's username.

The benefit of this is that it's now possible to narrow in on just tags of a
certain type if necessary.

There are a few other types of prefixes commonly used for tags. One is that
titled resources have default tags that are prefixed with "doc/", followed by
the name of the document. Removed tags are prefixed with "trash/", but these are
normally invisible to the user. There's a section on these trash tags below
which goes into more detail.
* Warning
ekg is a fairly new package, and as such, there may be significant bugs. Testing
is done, but this package has not yet had the wide use that will surface many
kinds of bugs.

* Installation
ekg is currently hosted on MELPA. It requires Emacs 28.1 or higher and the
[[https://github.com/ahyatt/triples][triples]] package, which is a way to express a graph in sqlite in emacs, alongside
basic querying functionality.

An example installation using =use-package= is below:
#+begin_src emacs-lisp
(use-package ekg
  :bind (([f11] . ekg-capture)))
#+end_src
* Setup
ekg allows flexibility in the note's major mode, which can be anything, in
theory. In reality, many modes are not suitable for notes.

The variable ~ekg-capture-default-mode~ will control what mode is on for new
notes. ~ekg-capture-acceptable-modes~ will control what modes can be set if you
want to change the mode. By default, it is set to ~org-mode~, ~markdown-mode~, and
~fundamental-mode~. The major mode is stored, alongside the note, and subsequent
edits of the note will be in the major mode of the note.

The database used by ekg is defined in =ekg-db-file=, which defaults to =nil=, which
will then use the standard triples database defined in
~triples-default-database-filename~. If you want to use a separate database for
ekg, just set ~ekg-db-file~ to the directory and filename of the file you want to use.

* Usage
To create a note, run =ekg-capture= to capture a text note, or =ekg-capture-url= to
capture a website. The note will, by default, be tagged with the current date.
This can be changed by changing the variable ~ekg-capture-auto-tag-funcs~, which
is a series of functions that are called and can add tags.

At the top of the note is a special section, which will be unfamiliar. This is
the metadata section, where it stores and displays editable metadata, notably
tags, but possibly other data such as URLs. If you want to change tags, just
edit them in the metadata section. Tags should autocomplete based on the
tags available to use.

The basic read operation in ekg is to show a list of notes with the same tag,
=ekg-show-notes-with-tag=. This shows all notes tagged with the current tag.
=ekg-show-notes-with-any-tags= is similar, but allows showing notes that match any
of a series of tags.

To show a tag that is tagged as the current day, you can use
=ekg-show-notes-for-today=.

In a tag buffer, you can use the following keys:
  - =n=, =p= to navigate up and down the notes.
  - =c= to create a note with the current tag.
  - =d= to delete the note, which will prompt to make sure you mean it.
  - =g= to refresh the buffer, which shouldn't be necessary in most cases.
  - =o= to open the current note.
  - =r= to remove the current tag(s) from the note.
  - =a= to show a new buffer with any of the tags from the current note.
  - =A= to show a new buffer with any of the tags from any of the notes.
  - =b= to browse a URL, if a URL is associated with the current note

The command =A=, for =ekg-notes-any-tags=, is notable; it allows the user to expand
the tags viewed to encompass all of the tag space in the current view. For
example, if there are three notes in an "emacs" tag buffer, one tagged "emacs"
and "2022-10-02", one tagged "emacs" and "vi", and one tagged "emacs", "buffer",
and "imenu", it would open a buffer as if the user had run
=ekg-show-notes-with-any-tags= with the arguments as if it was invoked like:
#+begin_src emacs-lisp
ekg-show-tag-any('("emacs", "2022-10-02", "vi", "buffer", "imenu"))
#+end_src
The subsequent buffer can again be expanded. Each expansion brings more
of the surrounding contextual note-space to view.

There is another command =ekg-show-tags-all= which will show notes who have all
the tags specified (basically an =AND= of the tags). However, the resulting buffer
can also be expanded with =ekg-notes-any-tags=, which then switches to showing
notes with any of the tags on the screen (an =OR= of the tags).
* Command summary
Global commands, can be run everywhere, and most should be bound to useful keybindings:

| Command                        | Description                                                         |
|--------------------------------+---------------------------------------------------------------------|
| =ekg-capture=                    | Capture a new note                                                  |
| =ekg-capture-url=                | Capture a new note about a URL                                      |
| =ekg-show-notes-with-tag=        | Open a tag buffer for notes matching the single tag given           |
| =ekg-show-notes-with-any-tags=   | Open a tag buffer for notes matching any of the given tags          |
| =ekg-show-notes-with-all-tags= | Open a tag buffer for notes matching all of the given tags          |
| =ekg-show-notes-in-trash=        | Open a tag buffer that shows all notes with trashed tags            |
| =ekg-show-notes-for-today=       | Open a tag buffer that shows notes with today's tag                 |
| =ekg-show-notes-latest-captured= | Open a buffer that shows the latest notes that have been captured |
| =ekg-show-notes-latest-modified= | Open a buffer that shows the latest notes that have been modified |
| =ekg-browse-url=                 | Open a URL stored as a resource to a note, completing by note title |

These are also global commands, but for more occasional or specialized uses:

| Command        | Description                                                |
|----------------+------------------------------------------------------------|
| =ekg-rename-tag= | Rename a tag, updating all references to it                |
| =ekg-upgrade-db= | After upgrading, update any obsoletely stored data         |
| =ekg-clean-db=   | Remove unused data from the database, including empty tags |

Commands relevant to capture buffers:

| Command                 | Description                        |
|-------------------------+------------------------------------|
| =ekg-capture-change-mode= | Change note major-mode             |
| =ekg-capture-finalize=  | Finish and save (bound to =C-c C-c=) |

Commands relevant to edit buffers:

| Command           | Description                        |
|-------------------+------------------------------------|
| =ekg-edit-finalize= | Finish and save (bound to =C-c C-c=) |

Commands relevant to tag buffers:

| Command                         | Description                                                               | Binding |
|---------------------------------+---------------------------------------------------------------------------+---------|
| =ekg-notes-tag=                   | Open another tag buffer selecting from tags of current note               | =t=       |
| =ekg-notes-open=                  | Edit the currently selected note                                          | =o=       |
| =ekg-notes-delete=                | Delete the currently selected note                                        | =d=       |
| =ekg-notes-remove=                | Remove the tag buffer's tags from the currently selected note             | =r=       |
| =ekg-notes-browse=                | Open the resource, if one exists                                          | =b=       |
| =ekg-notes-select-and-browse-url= | Select from the URLs in the current note buffer, and browse.     | =B=       |
| =ekg-notes-refresh=               | Refresh the tag, refetching all the data displayed                        | =g=       |
| =ekg-notes-create=                | Add a note with all the tags displayed in the buffer                      | =c=       |
| =ekg-notes-next=                  | Move selection to the next note                                           | =n=       |
| =ekg-notes-previous=              | Move selection to the previous note                                       | =p=       |
| =ekg-notes-any-note-tags=         | Open another tag buffer showing any of the tags in the current note       | =a=       |
| =ekg-notes-any-tags=              | Open another tag buffer showing any of the tags in any note in the buffer | =A=       |

* Storing information about resources
Currently it is possible to attach notes to references, such as URLs. This can
be done programmatically via the function =ekg-capture-url=. Although you can run
this function directly and add the URL and title, it's best to write a function
if possible to get the URL and title from the current browser. For example, on
Mac systems, you can write:
#+begin_src emacs-lisp
(defun my/ekg-capture-url ()
  (interactive)

  (ekg-capture-url
   (do-applescript "tell application \"Google Chrome\" to return URL of active tab of front window")
   (do-applescript "tell application \"Google Chrome\" to return Title of active tab of front window")))
#+end_src

You can then write a note about the URL, and add tags. It will, by default, add
the title as a tag prefixed with "doc/" (see the section on Prefixed Tags).

URLs can be browsed with =ekg-browse-url=, which lets you select the URL to browse
(via the built-in =browse-url=), via completion on document titles.

Resources, whether URLs or other types to come in the future, will be displayed
if they exist for a note, in the metadata field, as "Resource". The resource can
be changed there, but if it is changed, any other data referring to this
resource will also be changed along with it.
* The trash
When a tag is removed, it is kept around, but prefixed by "trash/". When it is
deleted, all tags are prefixed by "trash/". This is a special tag type that is
normally filtered out when the user is being shown a list of tags, for display
or selection.

You can remove the trash prefixes by editing the note, and to see a list of
all notes with a trash prefix, you can run =M-x ekg-show-notes-in-trash=.
* Importing from org-roam
You can import your notes from org-roam. This will turn all titles into tags,
and all links will become tags as well. At the moment, this is done via
executing elisp, since importing can be fairly idiosyncratic, and ekg and
org-roam have different ways of expressing the same thing that you may want to
change. It's best if you looked over =ekg-org-roam= and see what is going on, but
at least read the following description before manually executing
~(ekg-org-roam-import)~.

The import is idempotent, so it always will import to the same entities,
overwriting older data with new data. If you want to update what is in ekg, you
can just rerun the import.

In the import, titles and tags will have any commas removed, since commas are
commonly used in multiple completion as a separator, so anything with commas
would otherwise cause problems when selected.

If you have tags you want to turn into prefixes (which is a good idea for tags
widely applied, which essentially act as a categorization), you can add those
tags to the list at ~ekg-org-roam-import-tag-to-prefix~. For example,
#+begin_src emacs-lisp
(setq ekg-org-roam-import-tag-to-prefix (append ekg-org-roam-import-tag-to-prefix '("idea" "person")))
#+end_src
Then, when a note is found that is tagged with "idea", but with title "emacs is
a powerful tool", then the title in org-roam will be turned into the ekg tag
"idea/emacs is a powerful tool", and anything linked with it will also get the
same prefix.

* Backups
By default, the ekg package will back up its database, using the backup
functionality built into the triples library. By default, behavior is set by
~ekg-default-num-backups~, set to =5= by default, and ~ekg-default-backups-strategy~,
set to =daily=. These are, on first use of ekg, stored in the database itself, but
it can be set again at any time by running:
#+begin_src emacs-lisp
(triples-backups-setup ekg-db ekg-default-num-backups
                       ekg-default-backups-strategy)
#+end_src
The strategy can be one of the defaults of =daily=, =weekly=, =every-change=, or =never=, and
new methods can be defined as well. See the implementation in =triples-backups.el=
for more information.
